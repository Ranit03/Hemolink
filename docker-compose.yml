version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hemolink-postgres
    environment:
      POSTGRES_DB: hemolink_ai
      POSTGRES_USER: hemolink
      POSTGRES_PASSWORD: hemolink_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hemolink-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hemolink-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hemolink-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hemolink-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://hemolink:hemolink_password@postgres:5432/hemolink_ai
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      PORT: 5000
      FRONTEND_URL: http://localhost:3000
      ML_SERVICE_URL: http://ml-services:8000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - hemolink-network
    restart: unless-stopped
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hemolink-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:5000/api
      VITE_SOCKET_URL: http://localhost:5000
      VITE_ML_SERVICE_URL: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - hemolink-network
    restart: unless-stopped
    command: npm run dev

  # ML Services
  ml-services:
    build:
      context: ./ml-services
      dockerfile: Dockerfile
    container_name: hemolink-ml
    environment:
      DATABASE_URL: postgresql://hemolink:hemolink_password@postgres:5432/hemolink_ai
      REDIS_URL: redis://redis:6379
      ML_SERVICE_PORT: 8000
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    volumes:
      - ./ml-services:/app
      - ./ml-services/models:/app/models
      - ./ml-services/data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - hemolink-network
    restart: unless-stopped
    command: python app.py

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: hemolink-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - ml-services
    networks:
      - hemolink-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hemolink-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - hemolink-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hemolink-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - hemolink-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  hemolink-network:
    driver: bridge
