import { Message } from '../components/Chatbot'

export interface ChatbotResponse {
  text: string
  type?: 'text' | 'options' | 'appointment' | 'donor'
  options?: string[]
  metadata?: any
}

export class ChatbotService {
  private static instance: ChatbotService
  private conversationContext: Map<string, any> = new Map()

  static getInstance(): ChatbotService {
    if (!ChatbotService.instance) {
      ChatbotService.instance = new ChatbotService()
    }
    return ChatbotService.instance
  }

  generateResponse(userInput: string, conversationId: string = 'default'): ChatbotResponse {
    const input = userInput.toLowerCase().trim()
    const context = this.conversationContext.get(conversationId) || {}

    // Emergency keywords - highest priority
    if (this.isEmergency(input)) {
      return this.handleEmergency(input)
    }

    // Main categories
    if (this.isThalassemiaFAQ(input)) {
      return this.handleThalassemiaFAQ(input, context)
    }

    if (this.isDietAndCare(input)) {
      return this.handleDietAndCare(input, context)
    }

    if (this.isAppointmentBooking(input)) {
      return this.handleAppointmentBooking(input, context)
    }

    if (this.isDonorSupport(input)) {
      return this.handleDonorSupport(input, context)
    }

    // Specific detailed responses
    if (this.isSpecificQuery(input)) {
      return this.handleSpecificQuery(input, context)
    }

    // Default fallback
    return this.getDefaultResponse()
  }

  private isEmergency(input: string): boolean {
    const emergencyKeywords = ['emergency', 'urgent', 'help', 'crisis', 'immediate', 'now', 'asap']
    return emergencyKeywords.some(keyword => input.includes(keyword))
  }

  private isThalassemiaFAQ(input: string): boolean {
    const faqKeywords = ['thalassemia', 'faq', 'what is', 'types', 'symptoms', 'diagnosis', 'treatment']
    return faqKeywords.some(keyword => input.includes(keyword)) || input === 'thalassemia faqs'
  }

  private isDietAndCare(input: string): boolean {
    const dietKeywords = ['diet', 'care', 'food', 'nutrition', 'meal', 'eat', 'avoid', 'vitamin']
    return dietKeywords.some(keyword => input.includes(keyword)) || input === 'diet & care'
  }

  private isAppointmentBooking(input: string): boolean {
    const appointmentKeywords = ['appointment', 'book', 'schedule', 'transfusion', 'doctor', 'consultation']
    return appointmentKeywords.some(keyword => input.includes(keyword)) || input === 'book appointment'
  }

  private isDonorSupport(input: string): boolean {
    const donorKeywords = ['donor', 'support', 'blood', 'find', 'compatible', 'availability']
    return donorKeywords.some(keyword => input.includes(keyword)) || input === 'donor support'
  }

  private isSpecificQuery(input: string): boolean {
    const specificQueries = [
      'what is thalassemia', 'types of thalassemia', 'symptoms', 'treatment options',
      'meal plans', 'medication reminders', 'exercise guidelines',
      'regular transfusion', 'doctor consultation', 'lab tests',
      'find compatible donors', 'emergency blood request'
    ]
    return specificQueries.some(query => input.includes(query))
  }

  private handleEmergency(input: string): ChatbotResponse {
    return {
      text: "üö® **EMERGENCY BLOOD REQUEST ACTIVATED**\n\nüìç Locating nearest blood banks...\nü©∏ Checking compatible donors...\nüìû Alerting emergency network...\n\n**Immediate Actions:**\n1. Contact: +91-1234-567890 (24/7 Helpline)\n2. Nearest Hospital: City General Hospital (2.3 km)\n3. Blood Bank: Available O- units: 12\n\nüöë Emergency services have been notified. Help is on the way!\n\nStay calm and follow medical guidance.",
      type: 'text'
    }
  }

  private handleThalassemiaFAQ(input: string, context: any): ChatbotResponse {
    if (input.includes('what is thalassemia')) {
      return {
        text: "ü©∏ **Thalassemia** is an inherited blood disorder that affects the body's ability to produce hemoglobin and red blood cells.\n\n**Key Points:**\n‚Ä¢ Genetic condition passed from parents\n‚Ä¢ Causes anemia (low red blood cell count)\n‚Ä¢ Requires regular blood transfusions\n‚Ä¢ More common in Mediterranean, Middle Eastern, and Asian populations\n\n**Types:** Alpha and Beta Thalassemia, with varying severity levels.\n\nWould you like to know about treatment options or symptoms?",
        type: 'options',
        options: ['Treatment Options', 'Symptoms & Diagnosis', 'Diet & Care']
      }
    }

    if (input.includes('types of thalassemia')) {
      return {
        text: "üî¨ **Types of Thalassemia:**\n\n**Alpha Thalassemia:**\n‚Ä¢ Silent carrier (1 gene affected)\n‚Ä¢ Alpha thalassemia trait (2 genes)\n‚Ä¢ Hemoglobin H disease (3 genes)\n‚Ä¢ Alpha thalassemia major (4 genes)\n\n**Beta Thalassemia:**\n‚Ä¢ Beta thalassemia minor (trait)\n‚Ä¢ Beta thalassemia intermedia\n‚Ä¢ Beta thalassemia major (Cooley's anemia)\n\n**Severity varies** from no symptoms to life-threatening anemia requiring regular transfusions.",
        type: 'options',
        options: ['Symptoms & Diagnosis', 'Treatment Options', 'Living with Thalassemia']
      }
    }

    if (input.includes('symptoms') || input.includes('diagnosis')) {
      return {
        text: "üîç **Thalassemia Symptoms & Diagnosis:**\n\n**Common Symptoms:**\n‚Ä¢ Fatigue and weakness\n‚Ä¢ Pale skin and yellowing (jaundice)\n‚Ä¢ Slow growth in children\n‚Ä¢ Bone deformities\n‚Ä¢ Enlarged spleen\n\n**Diagnosis Methods:**\n‚Ä¢ Complete blood count (CBC)\n‚Ä¢ Hemoglobin electrophoresis\n‚Ä¢ Genetic testing\n‚Ä¢ Family history review\n\n**Early diagnosis** is crucial for proper management.",
        type: 'options',
        options: ['Treatment Options', 'Diet & Care', 'Living with Thalassemia']
      }
    }

    if (input.includes('treatment')) {
      return {
        text: "üíä **Thalassemia Treatment Options:**\n\n**Regular Treatments:**\n‚Ä¢ Blood transfusions (every 2-4 weeks)\n‚Ä¢ Iron chelation therapy\n‚Ä¢ Folic acid supplements\n‚Ä¢ Bone marrow transplant (curative)\n\n**Supportive Care:**\n‚Ä¢ Regular monitoring\n‚Ä¢ Vaccination against infections\n‚Ä¢ Dental and cardiac care\n‚Ä¢ Psychological support\n\n**Gene therapy** is an emerging treatment option.",
        type: 'options',
        options: ['Diet & Care', 'Book Appointment', 'Living with Thalassemia']
      }
    }

    // Default FAQ response
    return {
      text: "Here are some common Thalassemia questions:\n\n‚ùì What is Thalassemia?\n‚ùì Types of Thalassemia\n‚ùì Symptoms & Diagnosis\n‚ùì Treatment Options\n‚ùì Living with Thalassemia\n\nWhich topic would you like to know more about?",
      type: 'options',
      options: ['What is Thalassemia?', 'Types of Thalassemia', 'Symptoms & Diagnosis', 'Treatment Options', 'Living with Thalassemia']
    }
  }

  private handleDietAndCare(input: string, context: any): ChatbotResponse {
    if (input.includes('meal plans') || input.includes('meal')) {
      return {
        text: "üçΩÔ∏è **Sample Meal Plans for Thalassemia:**\n\n**Breakfast:**\n‚Ä¢ Oatmeal with berries and nuts\n‚Ä¢ Whole grain toast with avocado\n‚Ä¢ Green tea or herbal tea\n\n**Lunch:**\n‚Ä¢ Grilled chicken with quinoa\n‚Ä¢ Mixed vegetable salad\n‚Ä¢ Citrus fruit for Vitamin C\n\n**Dinner:**\n‚Ä¢ Baked fish with sweet potato\n‚Ä¢ Steamed broccoli\n‚Ä¢ Low-iron leafy greens\n\n**Snacks:** Nuts, yogurt, fruits (avoid iron-fortified foods)",
        type: 'options',
        options: ['Medication Reminders', 'Exercise Guidelines', 'Foods to Avoid']
      }
    }

    if (input.includes('medication') || input.includes('reminder')) {
      return {
        text: "üíä **Medication Reminders & Tips:**\n\n**Iron Chelation Therapy:**\n‚Ä¢ Take Deferasirox with food\n‚Ä¢ Monitor kidney function regularly\n‚Ä¢ Report side effects immediately\n\n**Folic Acid:**\n‚Ä¢ Take daily as prescribed\n‚Ä¢ Helps with red blood cell production\n\n**Reminders:**\n‚Ä¢ Set phone alarms\n‚Ä¢ Use pill organizers\n‚Ä¢ Keep medication diary\n‚Ä¢ Never skip doses",
        type: 'options',
        options: ['Exercise Guidelines', 'Emergency Care', 'Book Appointment']
      }
    }

    if (input.includes('exercise') || input.includes('activity')) {
      return {
        text: "üèÉ‚Äç‚ôÇÔ∏è **Exercise Guidelines for Thalassemia:**\n\n**Recommended Activities:**\n‚Ä¢ Light walking (30 min daily)\n‚Ä¢ Swimming (low impact)\n‚Ä¢ Yoga and stretching\n‚Ä¢ Breathing exercises\n\n**Precautions:**\n‚Ä¢ Avoid high-intensity sports\n‚Ä¢ Monitor heart rate\n‚Ä¢ Stay hydrated\n‚Ä¢ Rest when tired\n\n**Benefits:** Improves circulation, reduces fatigue, strengthens bones.",
        type: 'options',
        options: ['Meal Plans', 'Emergency Care', 'Book Appointment']
      }
    }

    // Default diet and care response
    return {
      text: "ü•ó **Diet & Care Guidelines for Thalassemia:**\n\n**Dietary Recommendations:**\n‚Ä¢ Avoid iron-rich foods (red meat, spinach)\n‚Ä¢ Increase Vitamin C (citrus fruits, tomatoes)\n‚Ä¢ Calcium-rich foods (dairy, leafy greens)\n‚Ä¢ Stay hydrated\n\n**Care Tips:**\n‚Ä¢ Take prescribed medications regularly\n‚Ä¢ Attend all medical appointments\n‚Ä¢ Monitor for infections\n‚Ä¢ Get adequate rest\n\nWould you like specific meal plans or medication reminders?",
      type: 'options',
      options: ['Meal Plans', 'Medication Reminders', 'Exercise Guidelines', 'Emergency Care']
    }
  }

  private handleAppointmentBooking(input: string, context: any): ChatbotResponse {
    if (input.includes('regular transfusion') || input.includes('transfusion')) {
      return {
        text: "ü©∏ **Regular Transfusion Appointment**\n\nüìÖ Available slots this week:\n‚Ä¢ Monday 10:00 AM - Blood Bank A\n‚Ä¢ Wednesday 2:00 PM - Blood Bank B\n‚Ä¢ Friday 9:00 AM - Blood Bank A\n\n‚ö†Ô∏è Please bring:\n‚Ä¢ ID and insurance card\n‚Ä¢ Previous transfusion records\n‚Ä¢ Current medication list\n\nWould you like me to book one of these slots?",
        type: 'options',
        options: ['Monday 10:00 AM', 'Wednesday 2:00 PM', 'Friday 9:00 AM', 'See More Slots']
      }
    }

    if (input.includes('doctor consultation') || input.includes('doctor')) {
      return {
        text: "üë®‚Äç‚öïÔ∏è **Doctor Consultation Booking**\n\nüìÖ Available appointments:\n‚Ä¢ Dr. Smith (Hematologist) - Tomorrow 3:00 PM\n‚Ä¢ Dr. Patel (Pediatric Hematologist) - Thursday 11:00 AM\n‚Ä¢ Dr. Johnson (Thalassemia Specialist) - Friday 4:00 PM\n\nüí° **Consultation includes:**\n‚Ä¢ Health assessment\n‚Ä¢ Treatment plan review\n‚Ä¢ Lab result discussion\n‚Ä¢ Medication adjustments",
        type: 'options',
        options: ['Dr. Smith - Tomorrow 3:00 PM', 'Dr. Patel - Thursday 11:00 AM', 'Dr. Johnson - Friday 4:00 PM', 'See All Doctors']
      }
    }

    if (input.includes('lab tests') || input.includes('tests')) {
      return {
        text: "üß™ **Lab Tests Scheduling**\n\nüìã **Required Tests:**\n‚Ä¢ Complete Blood Count (CBC)\n‚Ä¢ Iron studies (Ferritin, TIBC)\n‚Ä¢ Liver function tests\n‚Ä¢ Heart function (Echo)\n\nüìÖ **Available slots:**\n‚Ä¢ Tomorrow 8:00 AM (Fasting required)\n‚Ä¢ Thursday 10:00 AM\n‚Ä¢ Friday 2:00 PM\n\n‚è∞ **Preparation:** Fast for 12 hours before iron studies",
        type: 'options',
        options: ['Tomorrow 8:00 AM', 'Thursday 10:00 AM', 'Friday 2:00 PM', 'Test Information']
      }
    }

    // Default appointment booking response
    return {
      text: "üìÖ **Book Your Appointment**\n\nI can help you schedule:\n\nüè• Regular Transfusion\nüë®‚Äç‚öïÔ∏è Doctor Consultation\nüß™ Lab Tests\nüíâ Iron Chelation Therapy\n\nWhich type of appointment would you like to book?",
      type: 'appointment',
      options: ['Regular Transfusion', 'Doctor Consultation', 'Lab Tests', 'Iron Chelation Therapy']
    }
  }

  private handleDonorSupport(input: string, context: any): ChatbotResponse {
    if (input.includes('find compatible donors') || input.includes('compatible')) {
      return {
        text: "üîç **Finding Compatible Donors**\n\nü©∏ **Your Blood Type:** A+ (from profile)\n\n**Compatible Donors Found:**\n‚Ä¢ 23 A+ donors within 10km\n‚Ä¢ 8 O+ donors within 15km\n‚Ä¢ 3 O- universal donors within 20km\n\n**Next Steps:**\n1. Contact nearest donors\n2. Schedule compatibility tests\n3. Arrange donation appointment\n\nüìû **Emergency Contact:** Available 24/7",
        type: 'options',
        options: ['Contact Nearest Donors', 'Schedule Tests', 'Emergency Request', 'Donor Requirements']
      }
    }

    if (input.includes('emergency blood request') || input.includes('emergency request')) {
      return this.handleEmergency(input)
    }

    if (input.includes('donor availability') || input.includes('availability')) {
      return {
        text: "üìä **Current Donor Availability Status**\n\nüü¢ **High Availability:**\n‚Ä¢ O+ donors: 45 available\n‚Ä¢ A+ donors: 32 available\n\nüü° **Medium Availability:**\n‚Ä¢ B+ donors: 18 available\n‚Ä¢ AB+ donors: 12 available\n\nüî¥ **Low Availability:**\n‚Ä¢ O- donors: 8 available\n‚Ä¢ AB- donors: 3 available\n\nüìà **Trend:** Availability increases on weekends",
        type: 'options',
        options: ['Find Compatible Donors', 'Register as Donor', 'Emergency Request', 'Donor Alerts']
      }
    }

    // Default donor support response
    return {
      text: "ü§ù **Live Donor Support**\n\nI can help you with:\n\nüîç Find Compatible Donors\nüìû Contact Donor Network\nüö® Emergency Blood Request\nüìä Donor Availability Status\n\nWhat do you need assistance with?",
      type: 'donor',
      options: ['Find Compatible Donors', 'Emergency Blood Request', 'Donor Availability', 'Contact Donor Network']
    }
  }

  private handleSpecificQuery(input: string, context: any): ChatbotResponse {
    // Handle specific appointment time selections
    if (input.includes('monday 10:00 am') || input.includes('wednesday 2:00 pm') || input.includes('friday 9:00 am')) {
      return {
        text: "‚úÖ **Appointment Confirmed!**\n\nüìÖ **Details:**\n‚Ä¢ Date & Time: " + input.charAt(0).toUpperCase() + input.slice(1) + "\n‚Ä¢ Location: Blood Bank A\n‚Ä¢ Duration: 3-4 hours\n\nüìß **Confirmation sent to your email**\nüì± **SMS reminder 24 hours before**\n\n‚ö†Ô∏è **Important reminders:**\n‚Ä¢ Eat well before coming\n‚Ä¢ Bring all required documents\n‚Ä¢ Arrive 15 minutes early",
        type: 'options',
        options: ['Add to Calendar', 'Set Reminder', 'View Directions', 'Cancel Appointment']
      }
    }

    return this.getDefaultResponse()
  }

  private getDefaultResponse(): ChatbotResponse {
    return {
      text: "I'm here to help with:\nü©∏ Thalassemia information\nü•ó Diet and care guidance\nüìÖ Appointment scheduling\nü§ù Donor support\n\nCould you please choose one of these topics or ask a more specific question?",
      type: 'options',
      options: ['Thalassemia FAQs', 'Diet & Care', 'Book Appointment', 'Donor Support']
    }
  }

  setContext(conversationId: string, key: string, value: any): void {
    const context = this.conversationContext.get(conversationId) || {}
    context[key] = value
    this.conversationContext.set(conversationId, context)
  }

  getContext(conversationId: string, key: string): any {
    const context = this.conversationContext.get(conversationId) || {}
    return context[key]
  }
}

export default ChatbotService.getInstance()
